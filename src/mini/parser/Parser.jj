PARSER_BEGIN(MiniParser)
import java.util.List;
import java.util.ArrayList;
public class MiniParser {
}
PARSER_END(MiniParser)

SKIP: { " " | "\t" | "\r" | "\n" }
TOKEN: {
    <NUM : (["0"-"9"])+ > |
    <FN : "fn" > |
    <ASSIGN : ":=" > |
    <LET : "let" > |
    <RETURN : "return" > |
    <IDENT : (["a"-"z", "A"-"Z"])+ >
}

List<FunDecl> Prog():
  { List<FunDecl> ds; FunDecl d; }
  {
    (
      d = FunDecl() { ds.add(d); }
    )*
    { return ds; }
  }

FunDecl FunDecl():
  { FunDecl d; Token t; List<String> ps; List<Statement> bd; }
  {
    <FN>
    t = <IDENT>
    "(" ps = Params() ")"
    "{" b = Body() "}"
    { return new FunDecl(t.image, ps, bd); }
  }

List<String> Params():
  { Token p; List<String> ps = new ArrayList<String>(); }
  {
    p = <IDENT> { ps.add(p.image); }
    (
      "," p = <IDENT> { ps.add(p.image); }
    )*
    { return ps; }
  }

List<Statement> Body():
  { Statement st; List<Statement> sts = new ArrayList<Statement>(); }
  {
    (
      st = Statement() ";" { sts.add(st); }
    )*
    { return sts; }
  }

Statement Statement():
  { Token t; Expr e; }
  {
    (
      t = <IDENT>
      <ASSIGN>
      e = Expr()
      { return new AssignStatement(t.image, e); }
    ) | (
      <LET>
      t = <IDENT>
      <ASSIGN>
      e = Expr()
      { return new LetStatement(t.image, e); }
    ) | (
       <RETURN>
       e = Expr()
      { return new ReturnStatement(e); }
    )
  }

Expr Expr():
  { Expr a, b; Token n; }
  {
    a = Term()
    (
      "+" b = Expr() { return new Expr(ADD, a, b); }
    | "-" b = Expr() { return new Expr(SUB, a, b); }
    )
  }

Expr Term():
  { Expr a, b; }
  {
    a = Unary()
    (
      "*" b = Term() { return new Expr(MUL, a, b); }
    | "/" b = Term() { return new Expr(DIV, a, b); }
    )
  }

Expr Unary():
  { Expr a; }
  {
    "-" a = Elem() { return Expr(NEG, a); }
  | a = Elem()     { return a; }
  }

Expr Elem():
  { Token t; Expr a; }
  {
    t = <IDENT> { return new Expr(IDENT, t.image); }
  | t = <NUM>   { return new Expr(NUM, Integer.parseInt(t.image)); }
  | "(" a = Expr() ")" { return a; }
  }





