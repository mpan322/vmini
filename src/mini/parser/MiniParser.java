/* Generated By:JavaCC: Do not edit this line. MiniParser.java */
package mini.parser;
import java.util.List;
import java.util.ArrayList;
import mini.parser.ast.*;
import mini.parser.ast.expr.*;
public class MiniParser implements MiniParserConstants {

  static final public List<FunDecl> Prog() throws ParseException {
    List<FunDecl> ds = new ArrayList<FunDecl>(); FunDecl d;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      d = FunDecl();
                      ds.add(d);
    }
      {if (true) return ds;}
    throw new Error("Missing return statement in function");
  }

  static final public FunDecl FunDecl() throws ParseException {
     Token t; List<String> ps = new ArrayList<String>(); List<Statement> bd;
    jj_consume_token(FN);
    t = jj_consume_token(IDENT);
    jj_consume_token(11);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      ps = Params();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(12);
    jj_consume_token(13);
    bd = Body();
    jj_consume_token(14);
      {if (true) return new FunDecl(t.image, ps, bd);}
    throw new Error("Missing return statement in function");
  }

  static final public List<String> Params() throws ParseException {
    Token p; List<String> ps = new ArrayList<String>();
    p = jj_consume_token(IDENT);
                  ps.add(p.image);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(15);
      p = jj_consume_token(IDENT);
                        ps.add(p.image);
    }
      {if (true) return ps;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Statement> Body() throws ParseException {
    Statement st; List<Statement> sts = new ArrayList<Statement>();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LET:
      case RETURN:
      case IDENT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      st = Statement();
      jj_consume_token(16);
                             sts.add(st);
    }
      {if (true) return sts;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
    Token t; IExpr e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      t = jj_consume_token(IDENT);
      jj_consume_token(ASSIGN);
      e = Expr();
        {if (true) return new AssignStatement(t.image, e);}
      break;
    case LET:
      jj_consume_token(LET);
      t = jj_consume_token(IDENT);
      jj_consume_token(ASSIGN);
      e = Expr();
        {if (true) return new LetStatement(t.image, e);}
      break;
    case RETURN:
      jj_consume_token(RETURN);
      e = Expr();
        {if (true) return new ReturnStatement(e);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public IExpr Expr() throws ParseException {
    IExpr a, b; Token n;
    a = Term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case 18:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        jj_consume_token(17);
        b = Expr();
                       a = new BinaryExpr(BinaryExprType.ADD, a, b);
        break;
      case 18:
        jj_consume_token(18);
        b = Expr();
                       a = new BinaryExpr(BinaryExprType.SUB, a, b);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
      {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public IExpr Term() throws ParseException {
    IExpr a, b;
    a = Unary();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      jj_consume_token(19);
      b = Term();
                       a = new BinaryExpr(BinaryExprType.MUL, a, b);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
      {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public IExpr Unary() throws ParseException {
    IExpr a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
      a = Elem();
                     {if (true) return new UnaryExpr(UnaryExprType.NEG, a);}
      break;
    case NUM:
    case IDENT:
    case 11:
      a = Elem();
                     {if (true) return a;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public IExpr Elem() throws ParseException {
    Token t; IExpr a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      t = jj_consume_token(IDENT);
                  {if (true) return new IdentExpr(t.image);}
      break;
    case NUM:
      t = jj_consume_token(NUM);
                  {if (true) return new NumExpr(Integer.parseInt(t.image));}
      break;
    case 11:
      jj_consume_token(11);
      a = Expr();
      jj_consume_token(12);
                         {if (true) return a;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x400,0x8000,0x700,0x700,0x60000,0x60000,0x80000,0x40c20,0xc20,};
   }

  /** Constructor with InputStream. */
  public MiniParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MiniParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiniParser(MiniParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiniParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
