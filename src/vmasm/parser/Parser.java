/* Generated By:JavaCC: Do not edit this line. Parser.java */
package vmasm.parser;
import java.util.List;
import java.util.ArrayList;
import vmasm.parser.operand.*;
import vmasm.parser.symbol.*;
public class Parser implements ParserConstants {
    public static void main(String[] args) throws Exception {
        Instruction i = new Parser(new java.io.StringReader(args[0])).Instruction();
        System.out.println(i);
    }

  static final public List<Symbol> Prog() throws ParseException {
    List<Symbol> s = new ArrayList<Symbol>(); Symbol l;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case JUMP:
      case MOV:
      case SUB:
      case LABEL:
      case MUL:
      case POP:
      case PUSH:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
        l = Label();
        break;
      case ADD:
      case JUMP:
      case MOV:
      case SUB:
      case MUL:
      case POP:
      case PUSH:
        l = Instruction();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        s.add(l);
    }
    jj_consume_token(0);
      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public Label Label() throws ParseException {
    Token l;
    l = jj_consume_token(LABEL);
      {if (true) return new Label(l.image);}
    throw new Error("Missing return statement in function");
  }

  static final public JumpLabel JumpLabel() throws ParseException {
    Token l;
    l = jj_consume_token(LABEL);
      {if (true) return new JumpLabel(l.image);}
    throw new Error("Missing return statement in function");
  }

  static final public Instruction Instruction() throws ParseException {
    Instruction i; POperand a, b, r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      jj_consume_token(ADD);
      a = Value();
      b = Value();
      r = Reg();
          i = new Instruction(InstrType.ADD, a, b, r);
      break;
    case SUB:
      jj_consume_token(SUB);
      a = Value();
      b = Value();
      r = Reg();
          i = new Instruction(InstrType.SUB, a, b, r);
      break;
    case MUL:
      jj_consume_token(MUL);
      a = Value();
      b = Value();
      r = Reg();
          i = new Instruction(InstrType.MUL, a, b, r);
      break;
    case PUSH:
      jj_consume_token(PUSH);
      a = Value();
          i = new Instruction(InstrType.PUSH, a);
      break;
    case POP:
      jj_consume_token(POP);
      r = Reg();
          i = new Instruction(InstrType.POP, r);
      break;
    case MOV:
      jj_consume_token(MOV);
      a = Value();
      r = Reg();
          i = new Instruction(InstrType.MOV, a, r);
      break;
    case JUMP:
      jj_consume_token(JUMP);
      a = JumpLabel();
          i = new Instruction(InstrType.JUMP, a);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  static final public POperand Value() throws ParseException {
    POperand o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PER:
      o = Reg();
      break;
    case DOL:
      o = Const();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  static final public Const Const() throws ParseException {
    int v;
    jj_consume_token(DOL);
    v = Num();
      {if (true) return new Const(v);}
    throw new Error("Missing return statement in function");
  }

  static final public Register Reg() throws ParseException {
    int v;
    jj_consume_token(PER);
    v = Num();
      {if (true) return new Register(v);}
    throw new Error("Missing return statement in function");
  }

  static final public int Num() throws ParseException {
     Token n;
    n = jj_consume_token(NUM);
                     {if (true) return Integer.parseInt(n.image);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1fe0,0x1fe0,0x1de0,0x6000,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[17];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
